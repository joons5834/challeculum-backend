<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="companion.challeculum.domains.ground.GroundDao">
    <update id="deleteGround">
        update ground
        set status='cancelled'
        where id = #{groupId}
    </update>

    <select id="getGround" parameterType="long" resultType="grounddto">
        SELECT *
        from ground
        where id = #{id}
    </select>

    <select id="getGroundCreator" resultType="Long">
        select user_id
        from ground
        where id = #{groundId}
    </select>

    <select id="getGroundList" resultType="groundJoined">
        select *, -l.id
        from ground g join lecture l on
        g.lecture_id = l.id
        <where>
            <foreach collection="filterMap" index="key" item="value" separator=" AND ">
                ${key} = #{value}
            </foreach>
            <if test="keyword != null">AND l.title like concat('%', #{keyword}, '%')</if>
        </where>
        <if test="sortBy != null">
            <if test="sortBy == 'asc' or sortBy == 'desc'">
                ORDER BY ${orderBy} ${sortBy}
            </if>
        </if>
        limit #{startRow}, #{limit}
    </select>

    <select id="getMyGroundList" resultType="Map">
        with my_grounds as (
            select ground_id, title, is_success, end_at - curdate() as d_day
            from ground g join user_ground u on
            g.id = u.ground_id
            <where>
                u.user_id = #{userId}
                AND is_attending = 1
                <if test="status != null">AND g.status = #{status}</if>
            </where>
        ), rewards as (
            select ug.ground_id, sum(deposit),
                sum(is_success is null or is_success=1) as remaining ,
                sum(deposit) / sum(is_success is null or is_success=1) as expected_reward
            from ground g join user_ground ug
            on g.id = ug.ground_id
            where g.id in (select ground_id from my_grounds) and is_attending=1
            group by g.id
        ), missions_today as (
            select ground_id, assignment as mission_today
            from mission m right join ground g on
            m.ground_id = g.id
            where g.id in (select ground_id from my_grounds)
            and  curdate() between m.start_at and m.end_at
        )

        select g.ground_id as groundId, title, d_day as dDay,
                is_success as isSuccess, expected_reward as expectedReward,
                mission_today as missionToday
        from my_grounds g left join rewards r
            on g.ground_id = r.ground_id left join missions_today m
            on g.ground_id = m. ground_id
        <if test="startRow != null">
            limit #{startRow}, #{ROWS_PER_PAGE}
        </if>
    </select>

    <select id="getMyGrounds" resultType="Map">
        select g.id as groundId, platform, g.title as title,
               start_at as startAt, end_at as endAt,
               deposit, min_capacity as minCapacity, max_capacity as maxCapacity
        from ground g join user_ground ug on
            g.id = ug.ground_id join lecture l on
            g.lecture_id = l.id
        where ug.user_id = #{userId} and is_attending=1;
    </select>

    <select id="getGroundsByMe" resultType="Map">
        select g.id as groundId, platform, g.title as title,
               start_at as startAt, end_at as endAt, deposit,
               min_capacity as minCapacity, max_capacity as maxCapacity
        from ground g join lecture l
            on g.lecture_id = l.id
        where user_id = #{userId}
    </select>

    <insert id="createGround" parameterType="creategrounddto">
        insert into ground (user_id, lecture_id, title, information, level,
                            min_capacity, max_capacity, deposit, start_at, end_at, mission_fail_limit)
        values (#{userId}, #{lectureId}, #{title}, #{information}, #{level},
                #{minCapacity}, #{maxCapacity}, #{deposit}, #{startAt}, #{endAt}, #{missionFailLimit})
    </insert>

    <update id="refundDeposit">
        update user
        set point = point + (select deposit from ground where id = #{groundId})
        where id in (select user_id from user_ground where ground_id = #{groundId})
    </update>

    <update id="markNotAttending">
        update user_ground
        set is_attending = 0
        where user_id in (select user_id from user_ground where ground_id = #{groundId})
          and ground_id = #{ground_id}
    </update>

    <update id="updateGround">
        update ground
        <set>
            <foreach  collection="updateMap"  index="key" item="value"  open=""  separator=","  close="">
                ${key}=#{value}
            </foreach>
        </set>
        where id=#{groundId}
    </update>
    <!-- Ki Young !-->
    <select id="getDepositById" resultType="ground">
        select * from ground where id = #{groundId}
    </select>
    <!-- End of Ki Young !-->
</mapper>

